// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}
enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  defaultShippingAddress String?
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart[]
  addresses Address[]
  orders Order[]

  @@map("users")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  image       String
  description String
  price       Float
  tags        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart Cart[]
  orderProducts OrderProduct[]

  @@map("products")
}

model Address {
  id          String   @id @default(uuid())
  street      String
  city        String
  country     String
  user User @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

model Cart {
  id          String   @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId      String
  product Product @relation(fields: [productId], references: [id])
  productId   String
  quantity   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cart")
}

model Order {
  id         String   @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId     String
  totalPrice Float
  address String
  status OrderEventStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  products OrderProduct[]
  events OrderEvent[]
  @@map("orders")
}

model OrderProduct {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId String
  product Product @relation(fields: [productId], references: [id])
  productId String
  quantity Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product")
}

model OrderEvent {
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId String
  status OrderEventStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_events")
}